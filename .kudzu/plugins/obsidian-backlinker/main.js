/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OpenBacklinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  filteredKeywords: "",
  openInSeparatePane: false
};
var OpenBacklinksPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-backlinks-excluding-keywords",
      name: "Excluding Keywords",
      checkCallback: (checking) => {
        return this.openBacklinks(checking, true);
      }
    });
    this.addCommand({
      id: "open-backlinks-including-keywords",
      name: "Including Keywords",
      checkCallback: (checking) => {
        return this.openBacklinks(checking, false);
      }
    });
    this.addSettingTab(new SettingTab(this.app, this));
  }
  openBacklinks(checking, excludingKeywords) {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      if (checking) {
        return true;
      }
      const filesLinkingToActiveFile = Object.entries(
        this.app.metadataCache.resolvedLinks
      ).filter(
        (file) => Object.keys(file[1]).contains(activeFile.path)
      ).map((file) => file[0]).map(
        (filePath) => this.app.vault.getAbstractFileByPath(filePath)
      ).filter((file) => file instanceof import_obsidian.TFile).map((file) => file).filter((file) => {
        var keywords = this.settings.filteredKeywords.split(",").map((keyword) => keyword.trim()).filter((keyword) => keyword.length > 0);
        if (keywords.length == 0) {
          return true;
        }
        var includedKeyword = keywords.find(
          (keyword) => file.basename.includes(keyword)
        );
        if (excludingKeywords) {
          return includedKeyword == null;
        } else {
          return includedKeyword != null;
        }
      });
      if (filesLinkingToActiveFile.length > 0) {
        filesLinkingToActiveFile.forEach((file, index) => {
          if (index == 0 && this.settings.openInSeparatePane) {
            let leaf = this.app.workspace.getLeaf("split");
            this.app.workspace.setActiveLeaf(leaf);
            leaf.openFile(file, { active: false });
          } else {
            this.app.workspace.getLeaf("tab").openFile(file, { active: false });
          }
        });
      } else {
        new import_obsidian.Notice("No backlinks found");
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Filtered keywords").setDesc(
      "Filters backlinks based on the occurence of keywords in the file name."
    ).addText(
      (text) => text.setPlaceholder("hello, world").setValue(this.plugin.settings.filteredKeywords).onChange(async (value) => {
        this.plugin.settings.filteredKeywords = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open in new pane").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.openInSeparatePane).onChange(async (value) => {
        this.plugin.settings.openInSeparatePane = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
